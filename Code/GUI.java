import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 * @author Theo Lee
 * September 23d 2020
 * Ms. Khan
 * 
 * GUI for Recursive Reduced Row Echelon Form Calculator.
 */
public class GUI extends javax.swing.JFrame {
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spinVariable = new javax.swing.JSpinner();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        txtVariable = new javax.swing.JLabel();
        txtEquation = new javax.swing.JLabel();
        spinEquation = new javax.swing.JSpinner();
        buttonSubmit = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        spinVariable.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinVariableStateChanged(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.setRowSelectionAllowed(false);
        scrollPane.setViewportView(table);

        txtVariable.setText("Variables:");

        txtEquation.setText("Equations:");

        spinEquation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinEquationStateChanged(evt);
            }
        });

        buttonSubmit.setText("Submit");
        buttonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubmitActionPerformed(evt);
            }
        });

        buttonClear.setText("Clear");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtVariable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEquation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinEquation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonSubmit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtVariable)
                    .addComponent(txtEquation)
                    .addComponent(spinVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinEquation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSubmit)
                    .addComponent(buttonClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void spinVariableStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinVariableStateChanged
        /**
         * Makes sure spin does not decrease below 1. Sets the number of columns to the variable count and names them.
         */
        int n = (int)spinVariable.getValue();
        if (n < 1) {
            spinVariable.setValue(1);
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        String[] list = new String[n+1];
        for (int i = 0; i < n; i++)
            list[i] = "x" + i;
        list[n] = " ";
        model.setColumnIdentifiers(list);
    }//GEN-LAST:event_spinVariableStateChanged
    private void spinEquationStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinEquationStateChanged
        /**
         * Makes sure spin does not decrease below 1. Sets the number of rows to the variable count.
         */
        int n = (int)spinEquation.getValue();
        if (n < 1) {
            spinEquation.setValue(1);
            return;
        }
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        model.setRowCount(n);
    }//GEN-LAST:event_spinEquationStateChanged
    private void buttonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSubmitActionPerformed
        /**
         * Parses all values in cells into an array of doubles. Catches NullPointer and NumberFormatException errors.
         * Calls rref() from Matrix class and replaces cell contents with results.
         */
        
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        
        int r = model.getRowCount();
        int c = model.getColumnCount();
        double[][] matrix = new double[r][c];
        try {
            for (int i = 0; i < r; i++)
                for (int j = 0; j < c; j++)
                    matrix[i][j] = Double.parseDouble(model.getValueAt(i, j).toString());
            
            matrix = Matrix.rref(matrix);
        
            for (int i = 0; i < r; i++)
                for (int j = 0; j < c; j++)
                    model.setValueAt(matrix[i][j], i, j);
        }
        catch(java.lang.NullPointerException e) {
            JOptionPane.showMessageDialog(null,
        "Error: Please fill all the cells",
        "Error",
        JOptionPane.ERROR_MESSAGE);
        }
        catch(java.lang.NumberFormatException e) {
            JOptionPane.showMessageDialog(null,
        "Error: Please fill all cells with only numbers",
        "Error",
        JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonSubmitActionPerformed
    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        /**
         * Removes all values from all cells.
         */
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int r = model.getRowCount();
        int c = model.getColumnCount();
        for (int i = 0; i < r; i++)
            for (int j = 0; j < c; j++)
                model.setValueAt("", i, j);
    }//GEN-LAST:event_buttonClearActionPerformed
    private void loaded() {
        /**
         * Sets spin variables to 1. Disables reordering and resizing.
         */
        spinVariable.setValue(1);
        spinEquation.setValue(1);
        table.getTableHeader().setReorderingAllowed(false);
        table.getTableHeader().setResizingAllowed(false);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GUI gui = new GUI();
                gui.setVisible(true);
                gui.loaded();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonSubmit;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSpinner spinEquation;
    private javax.swing.JSpinner spinVariable;
    private javax.swing.JTable table;
    private javax.swing.JLabel txtEquation;
    private javax.swing.JLabel txtVariable;
    // End of variables declaration//GEN-END:variables
}